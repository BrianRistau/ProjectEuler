// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.  The first
// ten terms would be
//
//   1, 3, 6, 10, 15, 21, 28, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//   1:  1
//   3:  1,  3
//   6:  1,  2,  3,  6
//  10:  1,  2,  5, 10
//  15:  1,  3,  5, 15
//  21:  1,  3,  7, 21
//  28:  1,  2,  4,  7,  14,  28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over 500 divisors?

#include <stdio.h>
#include <stdlib.h>

// function prototypes
int numDivisors(int num);

// program entry point
int main(int argc, char **argv) {

	// variables for calculating the triangle numbers
	int num = 0, iter = 1;
	while (1) {
		// calculate the next triangle number
		num += iter;
		// check if the number has enough divisors
		if (numDivisors(num) > 500) break;
		// increment the iterator variable
		iter += 1;
	}

	// output the result
	printf("the answer is %d.\n", num);

}

// function to return the number of divisors
int numDivisors(int num) {

	// loop through all of the possible divisors
	int total = 0;
	for (int i = 1; i * i <= num; i ++) {
		// check if the number is a factor
		if (num % i == 0) {
			// check if the number is the square root
			if (i * i == num) total += 1;
			// otherwise, the number will have a complement
			else total += 2;
		}
	}

	// return the number of divisors
	return total;

}
